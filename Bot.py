from datetime import datetime
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import StarTransaction, Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, \
    InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

from numpy.random import set_state
from param.ipython import message
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from DataBase import save_name_to_db, save_income_to_db, save_expense_to_db, save_saving_to_db, \
    get_balance_from_db, get_user_history_from_db, set_limit_in_user_category_to_db
from SQLAlchemy import Base, User
from aiogram.filters import StateFilter

TOKEN = "8155567682:AAFhedmhBJIs4U8hWEtzf_xjRmidaA1hu1k"
DB_NAME = 'postgres'
DB_PORT = '5433'
DB_USER = 'postgres'
DB_PASSWORD = 'postgres'
DB_HOST = 'localhost'

bot = Bot(token = TOKEN)
dp = Dispatcher()

engine = create_async_engine(f'postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}')

@asynccontextmanager
async def get_db():
    async with AsyncSession(engine) as db:
        try:
            yield db
        finally:
           await db.close()

async def create_tables():
    async with engine.begin() as connection:
        #await connection.run_sync(Base.metadata.drop_all)
        await connection.run_sync(Base.metadata.create_all)
    print('—Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã')

@dp.message(Command("start"))
async def start_handler(message:Message, state: FSMContext):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    async with get_db() as db:
        user_in_db =  await db.get(User, user_id)
    if not user_in_db:
        await state.set_state(NameState.waiting_name)
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–µ–≥–æ –±–æ—Ç–∞!\n\n"
            "–Ø —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ!\n"
            "–ù–∞–ø–∏—à–∏ –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞–ª–∞: "
        )
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –±—é–¥–∂–µ—Ç–∞, {user_in_db.name}!" , reply_markup = reply_keyboard())

@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n\n"
        "–í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n\n"
        "üü¢ –î–æ—Ö–æ–¥: –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n\n"
        "üîª –†–∞—Å—Ö–æ–¥:\n"
        "   ‚Ä¢ –ó–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö —Ç—Ä–∞—Ç\n"
        "   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –ª–∏–º–∏—Ç–æ–≤\n\n"
        "üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è: —É—á–µ—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n\n"
        "üìä –ë–∞–ª–∞–Ω—Å/–ò—Å—Ç–æ—Ä–∏—è:\n"
        "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n"
        "   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é!"
    )

class NameState(StatesGroup):
    waiting_name = State()
    waiting_rename = State()

@dp.message(Command("rename"))
async def rename_handler(message: Message, state: FSMContext):
    await state.set_state(NameState.waiting_rename)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è: ")

@dp.message(NameState.waiting_rename)
async def set_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text
    async with get_db() as db:
         await save_name_to_db(user_id, name, db)
    await message.answer("–í–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await state.clear()

@dp.message(NameState.waiting_name)
async def set_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text
    async with get_db() as db:
         await save_name_to_db(user_id, name, db)
    await message.answer(
        "–¢–≤–æ–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üéâ\n\n"
        "–û –±–æ—Ç–µ ü§ñ\n"
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ‚Äî —ç—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–µ–≥–æ –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–∞—Å—á—ë—Ç—É –±—é–¥–∂–µ—Ç–∞! –Ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, —É—á–∏—Ç—ã–≤–∞—è –Ω—é–∞–Ω—Å—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç üí°\n"
        "–î–æ—Ö–æ–¥—ã ‚Äî –≤—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
        "–†–∞—Å—Ö–æ–¥—ã ‚Äî –≤—Å–µ —Ç—Ä–∞—Ç—ã\n"
        " –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã:\n"
        "* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π —Å—É–º–º–æ–π (–∞—Ä–µ–Ω–¥–∞, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, –ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞—Ä–ø–ª–∞—Ç–∞)\n"
        "* –ù–µ—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ‚Äî –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º–æ–π (—à—Ç—Ä–∞—Ñ—ã, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–µ–º–∏–∏)\n\n"
        "üü¢ –ú–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n"
        "* –¢–æ—á–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã\n"
        "* –ò–∑–±–µ–≥–∞—Ç—å –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "* –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
        "üü¢ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è\n"
        "–û—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ–±—â–µ–º –±—é–¥–∂–µ—Ç–µ –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç:\n"
        "* –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É\n"
        "* –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏\n\n"
        "üü¢ –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "* –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤—Å–µ –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è\n"
        "* –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–∏–º–∏—Ç–∞–º–∏ –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å—Ö–æ–¥–∞–º\n"
        "* –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–∞–∫ —á–∞—Å—Ç—å –±—é–¥–∂–µ—Ç–∞\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é @Statrixxx\n"
        "–£–¥–∞—á–∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏! üíº", reply_markup=reply_keyboard()
    )
    await state.clear()

class TransactionState(StatesGroup):
    waiting_category = State()
    waiting_amount = State()
    waiting_date = State()
    waiting_is_fixed = State()

class SavingState(StatesGroup):
    waiting_amount = State()
    waiting_date = State()

class OtherStates(StatesGroup):
    waiting_balance_history = State()
    waiting_limit_amount = State()

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞
@dp.message(Command("balance_history"))
@dp.message(F.text == "–ë–∞–ª–∞–Ω—Å–ò—Å—Ç–æ—Ä–∏—è")
async def get_balance_button_handler(message: Message, state: FSMContext):
    await state.set_state(OtherStates.waiting_balance_history)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å",callback_data= "btn1"), InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",callback_data= "btn2")],])
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup= keyboard)

#—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
@dp.message(Command("add_saving"))
@dp.message(F.text == "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è")
async def add_saving_handler(message: Message, state: FSMContext):
    await state.set_state(SavingState.waiting_amount)
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ")

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.message(Command("add_income"))
@dp.message(Command("add_expense"))
@dp.message(F.text == "–î–æ—Ö–æ–¥—ã")
@dp.message(F.text == "–†–∞—Å—Ö–æ–¥—ã")
async def add_transaction_handler(message: Message, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
    if message.text in ["/add_income", "–î–æ—Ö–æ–¥—ã"]:
        transaction_type = "income"
    else:
        transaction_type = "expense"

    await state.set_state(TransactionState.waiting_category)
    await state.update_data(e_or_i=transaction_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ")


@dp.message(TransactionState.waiting_category)
async def set_category(message: Message, state: FSMContext):
    category = message.text.lower()
    await state.update_data(category=category)
    await state.set_state(TransactionState.waiting_amount)
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É: ")


@dp.message(TransactionState.waiting_amount)
async def set_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await state.set_state(TransactionState.waiting_date)
        now = datetime.now()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ",
            reply_markup=await SimpleCalendar().start_calendar(year=now.year, month=now.month)
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ):")


@dp.message(TransactionState.waiting_is_fixed)
async def save_transaction(message: Message, state: FSMContext):
    is_fixed_answer = message.text.lower()
    user_id = message.from_user.id
    is_fixed = is_fixed_answer == "–¥–∞"

    data = await state.get_data()

    async with get_db() as db:
        if data['e_or_i'] == "income":
            await save_income_to_db(
                data['category'], user_id, data['amount'],
                data['date'], is_fixed, db
            )
            await message.answer("–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=reply_keyboard())
            await state.clear()
        elif data['e_or_i'] == "expense":
            result = await save_expense_to_db(
                data['category'], user_id, data['amount'],
                data['date'], is_fixed, db
            )
            await message.answer("–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=reply_keyboard())
            await state.clear()
            if not result[0]: #–∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏–º–∏—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                await state.update_data(category_id = result[1]) #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–î–∞", callback_data="btnYes"),
                     InlineKeyboardButton(text="–ù–µ—Ç", callback_data="btnNo")], ])
                await message.answer("–•–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?", reply_markup= keyboard)
        else:
            await message.answer("–û—à–∏–±–∫–∞")

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query(F.data == "btnNo")
async def cancel_set_limit_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ø–æ–Ω")
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.clear() #–æ—á–∏—â–∞—é state –æ—Ç category_id

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query(F.data == "btnYes")
async def button_limit_handler(callback: CallbackQuery):
    await callback.answer("–ø–æ–Ω")
    await callback.message.edit_reply_markup(reply_markup=None)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ª–∏–º–∏—Ç–∞ (—á–∏—Å–ª–æ):")


@dp.message(OtherStates.waiting_limit_amount)
async def set_limit_handler(message: Message, state: FSMContext):
    limit_amount = float(message.text)
    data = await state.get_data() #—Å–µ–π—á–∞—Å –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ category_id
    async with get_db() as db:
        await set_limit_in_user_category_to_db(data['category_id'], limit_amount, db)
    await message.answer("–õ–∏–º–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.clear() #–æ—á–∏—â–∞—é state –æ—Ç category_id

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
@dp.message(SavingState.waiting_amount)
async def set_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å <= 0")
            return
        await state.update_data(amount=amount)
        await state.set_state(SavingState.waiting_date)
        now = datetime.now()
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É: ",
            reply_markup=await SimpleCalendar().start_calendar(year=now.year, month=now.month)
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ):")

#–¥–∞–ª—å—à–µ –∏–¥–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å


#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query(F.data == "btn1")
async def get_balance_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_reply_markup(reply_markup=None)
    async with get_db() as db:
        balance = await get_balance_from_db(user_id, db)
        await callback.answer("–∫—É–∫—É")
        await callback.message.answer(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n\n"
            f"‚úÖ –î–æ—Ö–æ–¥—ã: {balance['incomes']:,.2f} ‚ÇΩ\n"
            f"‚ùå –†–∞—Å—Ö–æ–¥—ã: {balance['expenses']:,.2f} ‚ÇΩ\n"
            f"üíµ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è: {balance['savings']:,.2f} ‚ÇΩ\n\n"
            f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance['total']:,.2f} ‚ÇΩ\n\n"
            f"*–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞:*\n"
            f"–ë–∞–ª–∞–Ω—Å = –î–æ—Ö–æ–¥—ã - (–†–∞—Å—Ö–æ–¥—ã + –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è)"
        )

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π
@dp.callback_query(F.data == "btn2")
async def get_history_handler(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id

    async with get_db() as db:
        incomes, expenses, savings = await get_user_history_from_db(user_id, db)

        if not any([incomes, expenses, savings]):
            await callback.message.answer("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø—É—Å—Ç–∞.")
            return

        response = [
            "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:",
            "üîπ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π | üî∏ - –Ω–µ—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π\n"
        ]

        if incomes:
            response.append("\nüíµ –î–æ—Ö–æ–¥—ã:")
            for amount, date, is_fixed, category in incomes:
                line = format_history_line(amount, date, is_fixed, category)
                response.append(line)

        if expenses:
            response.append("\nüîª –†–∞—Å—Ö–æ–¥—ã:")
            for amount, date, is_fixed, category in expenses:
                line = format_history_line(amount, date, is_fixed, category)
                response.append(line)

        if savings:
            response.append("\nüí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è:")
            for amount, date in savings:
                date_str = date.strftime("%d.%m")
                amount_str = f"{float(amount):.2f}"
                response.append(f" {date_str} | {'–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è':<15} | {amount_str:>8} —Ä—É–±.")


        full_message = "\n".join(response)
        if len(full_message) > 4000:  # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            part1 = "\n".join(response[:len(response) // 2])
            part2 = "\n".join(response[len(response) // 2:])
            await callback.message.answer(part1)
            await callback.message.answer(part2)
        else:
            await callback.message.answer(full_message)

def format_history_line(amount, date, is_fixed, category):
    amount_str = f"{float(amount):.2f}"
    date_str = date.strftime("%d.%m")
    type_icon = "üîπ" if is_fixed else "üî∏"
    return f"{type_icon} {date_str} | {category[:15]:<15} | {amount_str:>1} —Ä—É–±."


@dp.message(F.text & ~F.command)
async def handler_text(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏", reply_markup=reply_keyboard())

@dp.callback_query(SimpleCalendarCallback.filter())
async def set_date(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    user_id = callback_query.from_user.id
    result, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if result:
        await state.update_data(date=date)
        data = await state.get_data()
        if data.get('e_or_i') in ["income", "expense"]:
            await state.set_state(TransactionState.waiting_is_fixed)
            await callback_query.message.answer(
                "–≠—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥? (–î–∞/–ù–µ—Ç): ")
        else:
            async with get_db() as db:
                await save_saving_to_db(
                    user_id, data['amount'], data['date'], db)

            await state.clear()
            await callback_query.message.answer("–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


def reply_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–î–æ—Ö–æ–¥—ã"), KeyboardButton(text="–†–∞—Å—Ö–æ–¥—ã")],
        [KeyboardButton(text="–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è"), KeyboardButton(text="–ë–∞–ª–∞–Ω—Å–ò—Å—Ç–æ—Ä–∏—è")]
    ], resize_keyboard=True)

async def run_bot():
    await create_tables()
    await dp.start_polling(bot)

asyncio.run(run_bot())